PRAGMA foreign_keys = ON;

DROP TABLE IF EXISTS UserConnection;
DROP TABLE IF EXISTS Message;
DROP TABLE IF EXISTS Friend;
DROP TABLE IF EXISTS UserRoom;
DROP TABLE IF EXISTS User;
DROP TABLE IF EXISTS Room;

CREATE TABLE User (
	userID INTEGER PRIMARY KEY AUTOINCREMENT,
	username VARCHAR(20) UNIQUE NOT NULL,
	password VARCHAR(20) NOT NULL
);

CREATE TABLE UserConnection (
	userID INTEGER,
	FOREIGN KEY(userID) REFERENCES User(userID)
		ON UPDATE CASCADE
);

CREATE TABLE Message (
	messageID INTEGER PRIMARY KEY AUTOINCREMENT,
	userID INTEGER,
	roomID INTEGER,
	message VARCHAR(1000),
	sentDate INTEGER,
	FOREIGN KEY(userID) REFERENCES User(userID)
		ON UPDATE CASCADE,
	FOREIGN KEY(roomID) REFERENCES Room(roomID)
		ON UPDATE CASCADE
);

CREATE TABLE Room (
	roomID INTEGER PRIMARY KEY AUTOINCREMENT,
	name VARCHAR(50)
);

CREATE TABLE Friend (
	firstUserID INTEGER,
	secondUserID INTEGER,
	friendStatus BOOLEAN DEFAULT 0,
	FOREIGN KEY(firstUserID) REFERENCES User(userID)
		ON UPDATE CASCADE,
	FOREIGN KEY(secondUserID) REFERENCES User(userID)
		ON UPDATE CASCADE,
	PRIMARY KEY(firstUserID, secondUserID)
);

CREATE TABLE UserRoom (
	userID INTEGER,
	roomID INTEGER,
	FOREIGN KEY(userID) REFERENCES User(userID)
		ON UPDATE CASCADE,
	FOREIGN KEY(roomID) REFERENCES Room(roomID)
		ON UPDATE CASCADE,
	PRIMARY KEY(userID, roomID)
);

CREATE TABLE MessageClass (
	messageClassID INTEGER PRIMARY KEY AUTOINCREMENT,
	header varchar(500),
	message varchar(5000)
);

CREATE TABLE StringList(
	stringListID INTEGER PRIMARY KEY AUTOINCREMENT,
	messageClassID INTEGER,
	string varchar(500),
	FOREIGN KEY(messageClassID) REFERENCES MessageClass(messageClassID)
		ON UPDATE CASCADE
		ON DELETE CASCADE
);
